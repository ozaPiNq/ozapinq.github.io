<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <description>Random thoughts on IT</description>
    <link>https://ozapinq.github.io</link>
    <atom:link href="https://ozapinq.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Conditional debugging in production</title>
        <description>&lt;p&gt;Imagine how easier your life could be if you were able to use debug output in
production?&lt;/p&gt;

&lt;p&gt;Often, when maintaining services, you deal with support tickets describing bugs,
in which there is not enough information to diagnose and fix the problem.&lt;/p&gt;

&lt;p&gt;In such cases your options are usually limited to: contact support engineer for
additional information, try to recreate user environment in which bug occured
and try to find signs of error in logs.&lt;/p&gt;

&lt;p&gt;Unfortunately, these options are not optimal because they take too much time.
Interaction with user as well as attempts to recreate user environment might
drag on for several days. Searching for relevant information in log files is
like looking for a needle in a haystack.&lt;/p&gt;

&lt;p&gt;Regardless of your choice, ticket resolution time will increase, while user will
be more and more disappointed in the service.&lt;/p&gt;

&lt;p&gt;Imagine - you want to buy an airline ticket with time-limited promo fare or
place a bid on auction. But because of some bug and untimely customer support
response you miss the opportunity. If you face similar problem once again, you
probably would leave that service and never come back.&lt;/p&gt;

&lt;p&gt;Using conditional debugging in production can help reduce the time needed to
solve user’s problem.&lt;/p&gt;

&lt;h2 id=&quot;conditional-debugging-usage-scenario&quot;&gt;Conditional debugging usage scenario&lt;/h2&gt;

&lt;p&gt;Consider the scenario of using conditional debugging to solve the problem with
inability to buy ticket through your service:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Customer support receives complaint from user about inability to buy a ticket&lt;/li&gt;
  &lt;li&gt;Support engineer enables conditional debugging for that particular user&lt;/li&gt;
  &lt;li&gt;User retries to buy a ticket&lt;/li&gt;
  &lt;li&gt;Support engineer sends gathered info to the developers to fix the error&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conditional-debugging-technique-overview&quot;&gt;Conditional debugging technique overview&lt;/h2&gt;

&lt;p&gt;To enable debugging of user requests, the user must be assigned a debug token.
This token must be sent to the user using a Cookie. It acts as a unique id of
debug session and contains logging configuration parameters for system
components.&lt;/p&gt;

&lt;p&gt;Upon receipt of subsequent requests from the user, the webserver checks the
correctness of received debug token. In case the debug token passes validation,
the webserver proxies the original request further setting X-Request-Id header
with the generated unique identifier. In case the debug token fails to validate,
no header is added to the request.&lt;/p&gt;

&lt;p&gt;Every system component received request with X-Request-Id header must add it to
logging output associated with this request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ozapinq.github.io/images/conditional_debugging_scheme.png&quot; alt=&quot;conditional debugging scheme&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;debug-token&quot;&gt;Debug token&lt;/h2&gt;

&lt;pre class=&quot;centered&quot;&gt;
Debug token
+------------------------------------------------------------+
|                unique_id                |      params      |
+------------------------------------------------------------+
&lt;/pre&gt;

&lt;p&gt;The token consists of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;unique id of debug session&lt;/li&gt;
  &lt;li&gt;logging parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The debug token is generated when starting a debug session for a user. When
starting a debug session, you can specify logging parameters for each system
component.&lt;/p&gt;

&lt;p&gt;The debug token is checked by the webserver for data integrity in order to avoid
forgery and DoS attacks through unauthorized intensive logging.&lt;/p&gt;

&lt;h3 id=&quot;token-parameters&quot;&gt;Token parameters&lt;/h3&gt;

&lt;p&gt;Token parameters are represented using sequential TLV (Type-Length-Value)
entries, describing logging configuration for each system component. Token
parameters are encoded with base64. The use of TLV for storing configuration
allows to organize flexible, space-efficient configuration schemes for different
services, where every service knows only it’s own configuration scheme and a
corresponding type of TLV entry.&lt;/p&gt;

&lt;pre class=&quot;centered&quot;&gt;
TLV entry example
+-------------------------------------------------------------------------+
|          |          |     common      |       db        | log |  trace  |
|   type   |  length  |    log level    |    log level    | fsm |   fsm   |
+-------------------------------------------------------------------------+
|   0xA3   |   0x12   |        2        |       3         |  t  |    f    |
+-------------------------------------------------------------------------+
&lt;/pre&gt;

&lt;h2 id=&quot;unique-request-id-x-request-id&quot;&gt;Unique Request ID (X-Request-Id)&lt;/h2&gt;

&lt;pre class=&quot;centered&quot;&gt;
X-Request-Id
+--------------------------------------------------------+
|             debug_token            |     unique_id     |
+--------------------------------------------------------+
&lt;/pre&gt;

&lt;p&gt;Unique Request ID consists of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;debug token&lt;/li&gt;
  &lt;li&gt;random id, unique for current debug session.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;X-Request-Id is generated by the webserver if a request with correct debug token
has been received from the user.&lt;/p&gt;

&lt;p&gt;The webserver drops X-Request-Id headers received from the client in order to
avoid token forgery.&lt;/p&gt;

&lt;h3 id=&quot;processing-requests-with-x-request-id-header&quot;&gt;Processing requests with X-Request-Id header&lt;/h3&gt;

&lt;p&gt;Every service received a request with X-Request-Id header must check logging
configuration parameters specified in debug token to determine which logging
policies apply to current request.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Debugging simplification is crucial for any service, as it speeds up processing
of support tickets, reduces unnecessary communication with the customer and have
an overall positive impact on customer experience.&lt;/p&gt;

&lt;p&gt;Using described technique in conjunction with carefully thought-out logging
configuration allows you to gather almost any information about request
processing without the need of services reconfiguration.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Dec 2018 00:00:00 +0300</pubDate>
        <link>https://ozapinq.github.io/posts/conditional-debugging-in-production</link>
        <guid isPermaLink="true">https://ozapinq.github.io/posts/conditional-debugging-in-production</guid>
      </item>
    
  </channel>
</rss>
